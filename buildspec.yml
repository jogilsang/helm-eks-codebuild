version: 0.2
phases:
  install: # Install kubectl, Helm3
    commands:
       - curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.1/2023-04-19/bin/linux/amd64/kubectl 
       - chmod +x kubectl
       - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
         # 위 명령어들은 kubectl을 다운로드하고 실행 권한을 부여한 후, PATH에 추가합니다.
         
         #- curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64
         #- chmod +x ./aws-iam-authenticator
         #- mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$HOME/bin:$PATH 
         # aws-iam-authenticator를 설치하는 옵션이 주석 처리되어 있습니다. 필요 시 이를 사용할 수 있습니다.

       - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
       - chmod 700 get_helm.sh && ./get_helm.sh
       # 위 명령어는 Helm 3 설치 스크립트를 다운로드하고 실행하여 설치를 진행합니다.
       
       - helm repo add stable https://charts.helm.sh/stable && helm repo update
       # Helm chart 리포지토리(stable)를 추가하고 업데이트합니다.
       
         #- yum install -y jq
         #- ARCH=amd64
         #- PLATFORM=$(uname -s)_$ARCH
         #- curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
         #- tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
         #- mv /tmp/eksctl /usr/local/bin
         # eksctl 설치 명령어가 주석 처리되어 있습니다. 필요할 경우 EKS 관리에 사용할 수 있습니다.

  pre_build: # Check helm version and Add kubeconfig to access to EKS cluster and check readiness of the cluster
    commands:
      - aws sts get-caller-identity
      # 현재 IAM 역할이 적절한지 확인합니다.
      
        #- TEMP_ROLE=$(aws sts assume-role --role-arn $CODEBUILD_ROLE_ARN --role-session-name codebuild-default-role)
        #- export TEMP_ROLE
        #- export AWS_ACCESS_KEY_ID=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.AccessKeyId')
        #- export AWS_SECRET_ACCESS_KEY=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SecretAccessKey')
        #- export AWS_SESSION_TOKEN=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SessionToken') 
        #- EKS_TEMP_ROLE=$(aws sts get-caller-identity | jq -r '.Arn')
        # 임시 역할을 설정하기 위한 AWS STS Assume Role 과정이 주석 처리되어 있습니다. 만약 역할 전환이 필요한 경우 이 부분을 사용할 수 있습니다.

      - helm version
      # Helm의 버전을 확인합니다.
      
      - mkdir ~/.kube/
      - CB_ROLE_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:role/${CB_ROLE_NAME}"
      - echo $CB_ROLE_ARN
      - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $EKS_CLUSTER_NAME --role-arn $CB_ROLE_ARN
      - chmod 0600 ~/.kube/config
      # kubeconfig 파일을 설정하여 EKS 클러스터와 상호작용할 수 있도록 구성합니다.
      
        # - ROLEARN=$(aws sts get-caller-identity | grep -oP '"Arn": "\K[^"]+(?=")')
        # - eksctl create iamidentitymapping --cluster $EKS_CLUSTER_NAME --region $AWS_DEFAULT_REGION --arn $ROLEARN --username codebuild-deploy:{{SessionName}} --group system:masters
        # eksctl을 사용해 IAM 역할을 EKS 클러스터에 매핑하는 명령어가 주석 처리되어 있습니다. 필요할 경우 사용할 수 있습니다.

  build: # Deploy app via Helm
    commands:
      #- kubectl config view --minify
      #- kubectl get pod
      # 위 두 명령어는 클러스터 상태를 확인하는 명령어인데, 주석 처리되어 있습니다. 필요 시 사용할 수 있습니다.

      - |
        ECR_TAGS=$(aws ecr describe-images --repository-name $ECR_REPO_NAME --query 'reverse(sort_by(imageDetails,& imagePushedAt)) | [0].imageTags[]' --filter 'tagStatus=TAGGED' --output text)
        echo "ECR_TAG=$ECR_TAG"
        IFS=$'\t' read -ra TAGS <<< "$ECR_TAGS"
        if [[ " ${TAGS[@]} " =~ " latest " ]]; then
          for tag in "${TAGS[@]}"; do
            if [ "$tag" != "latest" ]; then
              echo "$tag"
              ECR_TAG="$tag"
              break
            fi
          done
        else
          echo "${TAGS[0]}"
          ECR_TAG="${TAGS[0]}"
        fi
      # ECR에서 가장 최신의 태그를 가져와 애플리케이션 배포에 사용할 이미지를 결정합니다.

      - echo $AWS_ACCOUNT_ID
      - echo $ECR_REPO_NAME
      - echo $AWS_DEFAULT_REGION
      - echo $ALB_PUBLIC_SUBNET_1
      - echo $ALB_PUBLIC_SUBNET_2
      # 설정된 환경 변수들을 출력합니다.

      - sed -i "s/AWS_ACCOUNT_ID/$AWS_ACCOUNT_ID/" $HELM_DIR/values.yaml
      - sed -i "s/AWS_DEFAULT_REGION/$AWS_DEFAULT_REGION/" $HELM_DIR/values.yaml
      - sed -i "s/ECR_REPO_NAME/$ECR_REPO_NAME/" $HELM_DIR/values.yaml
      - sed -i "s/ALB_PUBLIC_SUBNET_1/$ALB_PUBLIC_SUBNET_1/" $HELM_DIR/values.yaml
      - sed -i "s/ALB_PUBLIC_SUBNET_2/$ALB_PUBLIC_SUBNET_2/" $HELM_DIR/values.yaml
      # Helm의 values.yaml 파일에서 환경 변수들을 업데이트하여 배포 시 필요한 설정값을 반영합니다.

      - cat $HELM_DIR/values.yaml
      # 수정된 values.yaml 파일을 출력하여 변경된 내용을 확인합니다.

      - helm upgrade -i $HELM_RELEASE_NAME $HELM_DIR -f $HELM_DIR/values.yaml --set image.tag=$ECR_TAG
      # Helm을 통해 애플리케이션을 업그레이드 또는 설치합니다. 설정된 values.yaml 파일과 ECR 이미지 태그를 사용합니다.
  
  post_build: # Display the endpoint of the application
    commands:
      - bash -c "if [ /"$CODEBUILD_BUILD_SUCCEEDING/" == /"0/" ]; then exit 1; fi"
      # 빌드 성공 여부를 확인하고 실패 시 스크립트를 종료합니다.

      - sleep 60
      # 애플리케이션 배포 후 60초 대기합니다.

      - GO_APP_ENDPOINT=`kubectl get ingress $HELM_RELEASE_NAME-$HELM_DIR -o jsonpath="{.status.loadBalancer.ingress[*].hostname}"`
      - echo -e "\nThe Go application can be accessed now via http://$GO_APP_ENDPOINT/"
      # 애플리케이션의 엔드포인트를 가져와 출력합니다. 사용자가 HTTP를 통해 접근할 수 있는 URL을 제공하여 최종 배포 상태를 확인합니다.
