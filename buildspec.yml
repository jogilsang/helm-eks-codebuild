version: 0.2
phases:
  install: # Install kubectl, Helm3
    commands:
       - curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.1/2023-04-19/bin/linux/amd64/kubectl 
       - chmod +x kubectl
       - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
         
         #- curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64
         #- chmod +x ./aws-iam-authenticator
         #- mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$HOME/bin:$PATH 

       - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
       - chmod 700 get_helm.sh && ./get_helm.sh
       - helm repo add stable https://charts.helm.sh/stable && helm repo update
       
         #- yum install -y jq
         #- ARCH=amd64
         #- PLATFORM=$(uname -s)_$ARCH
         #- curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
         #- tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
         #- mv /tmp/eksctl /usr/local/bin

  pre_build: # Check helm version and Add kubeconfig to access to EKS cluster and check readiness of the cluster
    commands:
      - aws sts get-caller-identity
        #- TEMP_ROLE=$(aws sts assume-role --role-arn $CODEBUILD_ROLE_ARN --role-session-name codebuild-default-role)
        #- export TEMP_ROLE
        #- export AWS_ACCESS_KEY_ID=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.AccessKeyId')
        #- export AWS_SECRET_ACCESS_KEY=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SecretAccessKey')
        #- export AWS_SESSION_TOKEN=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SessionToken') 
        #- EKS_TEMP_ROLE=$(aws sts get-caller-identity | jq -r '.Arn')
     
      - helm version
      - mkdir ~/.kube/
      - CB_ROLE_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:role/${CB_ROLE_NAME}"
      - echo $CB_ROLE_ARN
      - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $EKS_CLUSTER_NAME --role-arn $CB_ROLE_ARN
      - chmod 0600 ~/.kube/config
        # - ROLEARN=$(aws sts get-caller-identity | grep -oP '"Arn": "\K[^"]+(?=")')
        # - eksctl create iamidentitymapping --cluster $EKS_CLUSTER_NAME --region $AWS_DEFAULT_REGION --arn $ROLEARN --username codebuild-deploy:{{SessionName}} --group system:masters

  build: # Deploy app via Helm
    commands:
      #- kubectl config view --minify
      #- kubectl get pod
      - |
        ECR_TAGS=$(aws ecr describe-images --repository-name $ECR_REPO_NAME --query 'reverse(sort_by(imageDetails,& imagePushedAt)) | [0].imageTags[]' --filter 'tagStatus=TAGGED' --output text)
        echo "ECR_TAG=$ECR_TAG"
        IFS=$'\t' read -ra TAGS <<< "$ECR_TAGS"
        if [[ " ${TAGS[@]} " =~ " latest " ]]; then
          for tag in "${TAGS[@]}"; do
            if [ "$tag" != "latest" ]; then
              echo "$tag"
              ECR_TAG="$tag"
              break
            fi
          done
        else
          echo "${TAGS[0]}"
          ECR_TAG="${TAGS[0]}"
        fi

      - echo $AWS_ACCOUNT_ID
      - echo $ECR_REPO_NAME
      - echo $AWS_DEFAULT_REGION
      - echo $ALB_PUBLIC_SUBNET_1
      - echo $ALB_PUBLIC_SUBNET_2
      
      - sed -i "s/AWS_ACCOUNT_ID/$AWS_ACCOUNT_ID/" $HELM_DIR/values.yaml
      - sed -i "s/AWS_DEFAULT_REGION/$AWS_DEFAULT_REGION/" $HELM_DIR/values.yaml
      - sed -i "s/ECR_REPO_NAME/$ECR_REPO_NAME/" $HELM_DIR/values.yaml
      - sed -i "s/ALB_PUBLIC_SUBNET_1/$ALB_PUBLIC_SUBNET_1/" $HELM_DIR/values.yaml
      - sed -i "s/ALB_PUBLIC_SUBNET_2/$ALB_PUBLIC_SUBNET_2/" $HELM_DIR/values.yaml

      - cat $HELM_DIR/values.yaml
      
      - helm upgrade -i $HELM_RELEASE_NAME $HELM_DIR -f $HELM_DIR/values.yaml --set image.tag=$ECR_TAG
  
  post_build: # Display the endpoint of the application
    commands:
      - bash -c "if [ /"$CODEBUILD_BUILD_SUCCEEDING/" == /"0/" ]; then exit 1; fi"
      - sleep 60
      - GO_APP_ENDPOINT=`kubectl get ingress $HELM_RELEASE_NAME-$HELM_DIR -o jsonpath="{.status.loadBalancer.ingress[*].hostname}"`
      - echo -e "\nThe Go application can be accessed nw via http://$GO_APP_ENDPOINT/"
